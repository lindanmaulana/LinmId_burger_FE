import { zodResolver } from "@hookform/resolvers/zod";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { useForm } from "react-hook-form";
import { IoReload } from "react-icons/io5";
import { useDispatch } from "react-redux";
import { z } from "zod";
import useReduxLoading from "../../../hooks/redux/useReduxLoading";
import { handleSetAlert } from "../../../redux/slices/alertMessage";
import { handleProfileUpdate } from "../../../redux/slices/client/Profile.features";
import { errorMessage } from "../../../redux/slices/errorMessage";
import {
  CLEAR_LOADING,
  handleIsLoading,
  SET_LOADING,
} from "../../../redux/slices/isLoading";
import { AppDispatch } from "../../../redux/store";
import {
  dataUserDetailUpdate,
  ServiceUserDetailUpdate,
} from "../../../utils/users";
import Label from "./components/form/Label";
import ProfileUpdateImage from "./ProfileUpdateImage";
import { image } from "../../../types/type-image";

const schema = z.object({
  full_name: z.string().optional(),
  birthdate: z.string().optional(),
  gender: z.string().optional(),
  address: z.string().optional(),
});

type schemaUserDetail = z.infer<typeof schema>;

export interface ProfileUpdateProps {
  _id?: string;
  full_name?: string;
  birthdate?: string;
  gender?: string;
  address?: string;
  profile_picture?: image
}

const ProfileUpdate = (props: ProfileUpdateProps) => {
  const { _id, address, birthdate, full_name, gender, profile_picture } = props;
  const { loading } = useReduxLoading();
  const dispatch = useDispatch<AppDispatch>();
  const queryClient = useQueryClient();

  const {
    handleSubmit,
    register,
    reset,
    formState: { errors },
  } = useForm<schemaUserDetail>({
    resolver: zodResolver(schema),
  });

  const { mutate } = useMutation({
    mutationKey: ["mutateUserDetailUpdate"],
    mutationFn: (data: dataUserDetailUpdate) =>
      ServiceUserDetailUpdate({ id: _id, data }),
  });

  const handleFormSubmit = handleSubmit((data: dataUserDetailUpdate) => {
    dispatch(handleIsLoading({ type: SET_LOADING }));

    mutate(data, {
      onSuccess: (data) => {
        dispatch(handleIsLoading({ type: CLEAR_LOADING }));
        dispatch(
          handleSetAlert({
            active: true,
            message: data.message,
            transition: true,
            type: "success",
          })
        );
        queryClient.invalidateQueries({ queryKey: ["queryUserDetailGetAll"] });
        reset();
        dispatch(handleProfileUpdate());
      },
      onError: (err) => {
        dispatch(handleIsLoading({ type: CLEAR_LOADING }));
        dispatch(
          handleSetAlert({
            active: true,
            message: errorMessage(err),
            transition: true,
            type: "error",
          })
        );
      },
      onSettled: () => {
        dispatch(handleIsLoading({ type: CLEAR_LOADING }));
      },
    });
  });

  return (
    <div className="flex items-center justify-between">
      <ProfileUpdateImage imgurl={profile_picture.name} />
      <div className="flex items-center w-2/3 gap-8 p-4">
        <form
          onSubmit={handleFormSubmit}
          className="flex flex-col w-full gap-4 py-6"
        >
          <div className="flex flex-col w-3/4 gap-6 text-sm">
            <Label htmlFor="full_name">
              <span>Nama lengkap</span>
              <input
                {...register("full_name")}
                type="text"
                id="full_name"
                placeholder="Nama lengkap"
                className="w-full px-2 py-1 border rounded "
                defaultValue={full_name}
              />
              {errors.full_name && <span>{errors.full_name.message}</span>}
            </Label>
            <Label htmlFor="birthdate">
              <span>Tanggal lahir</span>
              <input
                {...register("birthdate")}
                type="date"
                id="birthdate"
                className="w-full px-2 py-1 border rounded "
                defaultValue={birthdate}
              />
              {errors.birthdate && <span>{errors.birthdate.message}</span>}
            </Label>

            <Label htmlFor="gender">
              <span>Jenis kelamin</span>
              <select
                {...register("gender")}
                id="gender"
                className="w-full px-2 py-1 border rounded"
                defaultValue={gender}
              >
                <option value="male">Male</option>
                <option value="female">Female</option>
              </select>
              {errors.gender && <span>{errors.gender.message}</span>}
            </Label>

            <Label htmlFor="address">
              <span>Alamat</span>
              <textarea
                {...register("address")}
                id="address"
                placeholder="Address"
                className="w-full px-2 py-1 border rounded "
                defaultValue={address}
              ></textarea>
              {errors.address && <span>{errors.address.message}</span>}
            </Label>
          </div>
          <div className="flex items-center gap-2 text-sm text-white font-open-sans-regular">
            <button type="reset" className="px-4 py-1 rounded bg-devRed">
              Reset
            </button>
            <button
              type="submit"
              disabled={loading}
              className="px-4 py-1 rounded bg-devGreen"
            >
              {loading ? (
                <IoReload className="text-xl w-11 animate-spin" />
              ) : (
                "Update"
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default ProfileUpdate;
